const express = require("express");
const path = require("path");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const app = express();
app.use(express.json());

const isValid = require("date-fns/isValid");
var format = require("date-fns/format");

const dbPath = path.join(__dirname, "todoApplication.db");
let db = null;
const initializeDbAndServer = async () => {
  try {
    db = await open({ filename: dbPath, driver: sqlite3.Database });
    app.listen(3000, () => {
      console.log("server running at http://localhost:3000");
    });
  } catch (e) {
    console.log(`DB ERROR : ${e}`);
    process.exit(1);
  }
};

initializeDbAndServer();

const isValidPriority = (requestQuery) => {
  return (
    requestQuery.priority === "HIGH" ||
    requestQuery.priority === "LOW" ||
    requestQuery.priority === "MEDIUM"
  );
};

const isValidStatus = (requestQuery) => {
  return (
    requestQuery.status === "TO DO" ||
    requestQuery.status === "IN PROGRESS" ||
    requestQuery.status === "DONE"
  );
};

const isValidCategory = (requestQuery) => {
  return (
    requestQuery.category === "WORK" ||
    requestQuery.category === "HOME" ||
    requestQuery.category === "LEARNING"
  );
};

const hasStatusProperties = (requestQuery) => {
  return requestQuery.status !== undefined;
};

const hasPriorityProperties = (requestQuery) => {
  return requestQuery.priority !== undefined;
};

const hasPriorityStatusProperties = (requestQuery) => {
  return (
    requestQuery.priority !== undefined && requestQuery.status !== undefined
  );
};

const hasCategoryStatusProperties = (requestQuery) => {
  return (
    requestQuery.category !== undefined && requestQuery.status !== undefined
  );
};

const hasCategoryProperties = (requestQuery) => {
  return requestQuery.category !== undefined;
};

const hasCategoryPriorityProperties = (requestQuery) => {
  return (
    requestQuery.category !== undefined && requestQuery.priority !== undefined
  );
};

const dataObjectIntoResponseObject = (dbObject) => {
  return {
    id: dbObject.id,
    todo: dbObject.todo,
    priority: dbObject.priority,
    category: dbObject.category,
    status: dbObject.status,
    dueDate: dbObject.due_date,
  };
};

/// API 1

app.get("/todos/", async (request, response) => {
  let getTOdoQuery = "";
  let data = null;
  const { search_q = "", category, priority, status, dueDate } = request.query;
  switch (true) {
    case hasStatusProperties(request.query):
      if (isValidStatus(request.query)) {
        getTOdoQuery = `
            SELECT * FROM todo
            WHERE status = '${status}';`;
      } else {
        response.status(400);
        response.send("Invalid Todo status");
      }
      break;
    case hasPriorityProperties(request.query):
      if (isValidPriority(request.query)) {
        getTOdoQuery = `
          SELECT * FROM todo
          WHERE priority = '${priority}';`;
      } else {
        response.status(400);
        response.send("Invalid Todo Priority");
      }
      break;
    case hasPriorityStatusProperties(request.query):
      if (isValidPriority(request.query) && isValidStatus(request.query)) {
        getTOdoQuery = `
          SELECT * FROM todo
          WHERE priority = '${priority}' AND status = '${status}';`;
      } else {
        response.status(400);
        response.send("Invalid Todo Priority And Status");
      }
      break;
    case hasCategoryStatusProperties(request.query):
      if (isValidCategory(request.query) && isValidStatus(request.query)) {
        getTOdoQuery = `
          SELECT * FROM todo
          WHERE category = '${category}' AND status = '${status}';`;
      } else {
        response.status(400);
        response.send("Invalid Todo Category And status");
      }
      break;
    case hasCategoryProperties(request.query):
      if (isValidCategory(request.query)) {
        getTOdoQuery = `
          SELECT * FROM todo 
          WHERE category = '${category}';`;
      } else {
        response.status(400);
        response.send("Invalid Todo Category");
      }
      break;
    case hasCategoryPriorityProperties(request.query):
      if (isValidCategory(request.query) && isValidPriority(request.query)) {
        getTOdoQuery = `
          SELECT * FROM todo 
          WHERE category = '${category}' AND priority = '${priority}';`;
      } else {
        response.status(400);
        response.send("Invalid Todo Priority And Category");
      }
    default:
      getTOdoQuery = `
          SELECT * FROM todo
          WHERE todo LIKE '%${search_q}%';`;
      break;
  }
  data = await db.all(getTOdoQuery);
  response.send(data.map((each) => dataObjectIntoResponseObject(each)));
});

/// API 2

app.get("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  const particularQuery = `
    SELECT * FROM todo WHERE id = ${todoId};`;
  const particularResponse = await db.get(particularQuery);
  response.send(dataObjectIntoResponseObject(particularResponse));
});

/// API 3

app.get("/agenda/", async (request, response) => {
  let { date } = request.query;
  const newDate = format(parseInt(date), "yyyy-MM-dd");
  const dateQuery = `
  SELECT * FROM todo
  WHERE due_date = ${newDate};`;
  const dateObject = await db.get(dateQuery);
  response.send(dateObject);
});

/// API 4

app.post("/todos/", async (request, response) => {
  const { id, todo, priority, status, category, dueDate } = request.body;
  const dueDateFormat = format(new Date(dueDate), "yyyy-MM-dd");
  const postQuery = `
    INSERT INTO todo
    (id,todo,priority,status,category,due_date)
    VALUES
    (${id},'${todo}','${priority}','${status}','${category}',${dueDateFormat});`;
  await db.run(postQuery);
  response.send("Todo Successfully Added");
});

/// API 5
app.put("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  let updateColumn = "";

  const requestBody = request.body;
  switch (true) {
    case requestBody.status !== undefined:
      updateColumn = "Status";
      break;
    case requestBody.priority !== undefined:
      updateColumn = "Priority";
      break;
    case requestBody.todo !== undefined:
      updateColumn = "Todo";
      break;
    case requestBody.category !== undefined:
      updateColumn = "Category";
      break;
    case requestBody.dueDate !== undefined:
      updateColumn = "Due Date";
  }
  const previousTodoQuery = `
    SELECT * FROM todo WHERE id = ${todoId};`;
  const previousTodo = await db.get(previousTodoQuery);

  const {
    todo = previousTodo.todo,
    priority = previousTodo.priority,
    status = previousTodo.status,
    category = previousTodo.category,
    dueDate = previousTodo.dueDate,
  } = request.body;

  const updateTodoQuery = `UPDATE todo 
    SET todo = '${todo}',
    priority = '${priority}',
    status = '${status}',
    category = '${category}',
    due_date = '${dueDate}'
    WHERE id = ${todoId};`;
  await db.run(updateTodoQuery);
  response.send(`${updateColumn} Updated`);
});

/// API 6
app.delete("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  const deleteQuery = `
    DELETE FROM todo
    WHERE id = ${todoId};`;
  await db.run(deleteQuery);
  response.send("Todo Deleted");
});

module.exports = app;
